<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据类型 - 深拷贝</title>
    <link href="/2021/06/08/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/06/08/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Sean</p><p>前言：当对变量进行赋值操作时，往往会发现引用类型的变量直接赋值会导致多个引用类型共享同一值的问题。那我们就需要使用深拷贝对其进行赋值，避免出现以上问题。</p></blockquote><h1 id="1-什么是深拷贝"><a href="#1-什么是深拷贝" class="headerlink" title="1. 什么是深拷贝"></a>1. 什么是深拷贝</h1><p>深拷贝即为对深层嵌套引用类型的数据进行层内基础数据类型的赋值操作。以避免引用类型直接赋值带来的共享同一值的问题。例：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'lisi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p class="note note-warning"><strong>注意：</strong><br/> 我们改变了obj2的name，但是obj1的name也被改变了，为了避免这种问题，我们需要深拷贝</p><p>例如：</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'zhangsan'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这就是最简单的深拷贝，但是当引用类型里面还是引用类型时，比如对象里面还有对象，该方法还是没有用。</p><h1 id="2-如何进行深拷贝"><a href="#2-如何进行深拷贝" class="headerlink" title="2. 如何进行深拷贝"></a>2. 如何进行深拷贝</h1><h2 id="2-1-JSON"><a href="#2-1-JSON" class="headerlink" title="2.1 JSON"></a>2.1 JSON</h2><p>JSON有两个方法，一个方法是<code>json.stringify()</code>可以将一个对象转换成字符串，第二个方法为<code>json.parse()</code>可以将字符串转换成json对象。我们只需要将一个对象先转换成字符串再转换成对象，该对象就不会跟原来的对象指向共同的值了。</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    obj2 <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'zhangsan'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><p>成功了！<strong>但是</strong>，</p><p>该方法有诸多缺陷，例如会忽视掉引用类型里的symbol，null等数据，也不会转换函数方法，Date()，RegExp等。</p><h2 id="2-2-深层递归"><a href="#2-2-深层递归" class="headerlink" title="2.2 深层递归"></a>2.2 深层递归</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>简单的遍历赋值会失效是因为它只拷贝了一层，那么我们让它递归直到数据为基础类型就停止不就可以了吗</p><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newObj    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    obj2 <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lisi"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// 'zhangsan'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>成功了！<strong>但是</strong>，</p><p>引用类型只有对象吗？如果是数组该怎么办？那我们则需要加上对象判断，以下以区分数组和对象为例</p><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> newObj<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>name<span class="token operator">:</span><span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    arr2 <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lisi"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p class="note note-warning"><strong>注意</strong><br/> 该例子只判断了数组和对象，实际情况下还有很多需要单独判断，例如函数等</p><p>成功了！<strong>但是，</strong></p><p>我们使用递归会不会出现一些问题呢？是的，如果一个<strong>引用类型里面有引用到自己</strong>，那么递归就会<strong>爆栈</strong>，导致失败。为此，我们需要检测循环引用，使其闭环。</p><h3 id="闭环"><a href="#闭环" class="headerlink" title="闭环"></a>闭环</h3><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">let</span> newObj <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newObj<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> newObj<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>name<span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>obj1<span class="token punctuation">.</span>o <span class="token operator">=</span> obj1<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span> <span class="token comment">// &#123;name: 'zhangsan', o: obj1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>OK 这就是基本的深拷贝！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6844903929705136141#heading-5">如何写出一个惊艳面试官的深拷贝?</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
      <category>数据类型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何解决跨域问题 - JSONP？</title>
    <link href="/2021/06/07/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%9F/"/>
    <url>/2021/06/07/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Sean</p><p>前言 ：为什么有跨域问题？</p><p>当客户端向服务器端请求数据的时候，如果两者不同源，即<strong>协议号，域名或者端口号有任一不一样</strong>，则<strong>浏览器</strong>为了安全起见将会拦截服务器端响应的数据。这就是同源政策。而JSONP则是一种打破同源政策的方法。</p></blockquote><h1 id="1-什么是JSONP"><a href="#1-什么是JSONP" class="headerlink" title="1. 什么是JSONP"></a>1. 什么是JSONP</h1><p>JSONP是 “JSON with padding” 的简写，是在Web服务上流行的一种JSON变体。</p><p>JSONP利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞，网页可以获得其他来源动态产生的JSON数据。后端将数据进行相应的转化就能绕开浏览器的同源政策，将数据发送给前端。这也意味着使用JSONP需要前端和后端共同支持。</p><h1 id="2-如何使用JSONP"><a href="#2-如何使用JSONP" class="headerlink" title="2. 如何使用JSONP"></a>2. 如何使用JSONP</h1><h2 id="2-1-实现流程"><a href="#2-1-实现流程" class="headerlink" title="2.1 实现流程"></a>2.1 实现流程</h2><ul><li>声明一个回调函数，该函数将作为请求参数和接受处理数据的重要工具。函数的形参为要获取目标数据。</li><li>动态创建一个<code>script</code>标签插入文本中。把跨域的API几口写在src属性上，并且将在后面拼接上<code>?callback=回调函数</code>的参数。</li><li>服务器端收到请求后，把传进来的函数名和他需要的数据拼接成一个字符串</li><li>最后服务器把准备的数据返回给客户端，客户端还是使用之前声明的回调函数对返回的数据进行操作。</li></ul><h2 id="2-2-封装一个JSONP"><a href="#2-2-封装一个JSONP" class="headerlink" title="2.2 封装一个JSONP"></a>2.2 封装一个JSONP</h2><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* index.html */</span><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>        window<span class="token punctuation">[</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        params<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>params<span class="token punctuation">,</span> callback<span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> arrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> parmas<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        script<span class="token punctuation">.</span>src<span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>url<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>arrs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    url<span class="token operator">:</span><span class="token string">'https://www.xxxxx.com:3000/name'</span><span class="token punctuation">,</span>    params<span class="token operator">:</span><span class="token punctuation">&#123;</span>age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    callback<span class="token operator">:</span><span class="token string">'show'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h2 id="2-2-服务器端实现"><a href="#2-2-服务器端实现" class="headerlink" title="2.2 服务器端实现"></a>2.2 服务器端实现</h2><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> urllib <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token keyword">var</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token operator">:</span><span class="token string">'world'</span><span class="token punctuation">&#125;</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> params <span class="token operator">=</span> urllib<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// jsonp</span>        <span class="token keyword">var</span> str <span class="token operator">=</span> params<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback <span class="token operator">+</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'jsonp server is on'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h1 id="3-为什么要使用JSONP"><a href="#3-为什么要使用JSONP" class="headerlink" title="3. 为什么要使用JSONP"></a>3. 为什么要使用JSONP</h1><ul><li><p><strong>简单易用</strong>，解决了主流浏览器跨域数据访问的问题</p></li><li><p><strong>兼容性好</strong>，支持IE9以下浏览器</p></li></ul><h1 id="4-JSONP有什么缺点"><a href="#4-JSONP有什么缺点" class="headerlink" title="4. JSONP有什么缺点"></a>4. JSONP有什么缺点</h1><ul><li>JSONP仅支持get方法</li><li>安全系数不高，容易遭受XSS攻击</li><li>不好确定JSONP是否请求失败。开发者经常需要使用计时器来确认请求响应时间并决定是否放弃等待响应。但即使如此还是不准确，因为不同用户网络连接速度和带宽是不一样的</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://segmentfault.com/a/1190000007665361">jsonp的原理与实现</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://juejin.cn/post/6844903767226351623">九种跨域方式实现原理 (完整版)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>前端网络</category>
      
      <category>跨域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络安全-XSS &amp; CSRF</title>
    <link href="/2021/06/06/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-XSS-CSRF/"/>
    <url>/2021/06/06/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-XSS-CSRF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Sean</p><p>前言 ：XSS和CSRF是常见的网络安全问题，忽视它们可能为应用带来巨大的打击和损失。其中XSS名声在外，通常都会采取各种措施进行防护。而CSRF却经常被忽视，被认为攻击性没有XSS大。但两者可能造成的后果都是严重的。</p></blockquote><h1 id="1-Cross-Site-Scripting"><a href="#1-Cross-Site-Scripting" class="headerlink" title="1. Cross Site Scripting"></a>1. Cross Site Scripting</h1><h2 id="1-1-XSS是什么"><a href="#1-1-XSS是什么" class="headerlink" title="1.1 XSS是什么"></a>1.1 XSS是什么</h2><p>XSS攻击是<strong>跨站脚本攻击</strong>。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户信息，比如cookie等。这是因为网站没有对恶意代码进行过滤，与正常代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的。</p><h2 id="1-2-XSS有哪些类型"><a href="#1-2-XSS有哪些类型" class="headerlink" title="1.2 XSS有哪些类型"></a>1.2 XSS有哪些类型</h2><ul><li><strong>存储型（服务器）</strong>，恶意代码提交到了网站的数据库中，当用户请求数据的时候，服务器将其拼接为HTML后返回给用户，从而导致恶意代码执行</li><li><strong>反射性（服务器）</strong>，攻击者构建了特殊的URL，当服务器接受到请求后，从URL中获取数据，拼接到HTML后返回，从而导致恶意代码执行</li><li><strong>DOM型（浏览器）</strong>，攻击者构建了特殊的URL，用户打开网站后，js脚本从URL中获取数据，从而导致了恶意代码的执行</li></ul><h2 id="1-3-如何预防XSS"><a href="#1-3-如何预防XSS" class="headerlink" title="1.3 如何预防XSS"></a>1.3 如何预防XSS</h2><h3 id="1-3-1-恶意代码提交时过滤代码"><a href="#1-3-1-恶意代码提交时过滤代码" class="headerlink" title="1.3.1 恶意代码提交时过滤代码"></a>1.3.1 <strong>恶意代码提交时过滤代码</strong></h3><ul><li><p>检测输入的信息，进行前端过滤和后端过滤</p><p class="note note-danger"><strong>不推荐</strong><br/>    可能会引起乱码等意外的情况</p></li><li><p>数据存入数据库中时进行转义处理。比如把<code>&amp; &lt; &gt; &quot; &#39; /</code> 等字符转义掉</p><p class="note note-primary"><strong>推荐-服务端</strong><br/>    对于转义CSS内联样式，内敛JS，内联JSON等需要额外且复杂的转义策略</p></li></ul><h3 id="1-3-2-浏览器执行恶意代码时方案"><a href="#1-3-2-浏览器执行恶意代码时方案" class="headerlink" title="1.3.2 浏览器执行恶意代码时方案"></a>1.3.2 <strong>浏览器执行恶意代码时方案</strong></h3><ul><li><p>纯前端渲染。</p><ul><li>先让浏览器加载一个静态HTML，此HTML中不包含任何跟业务相关数据。</li><li>然后浏览器执行HTML的js脚本。</li><li>JS通过ajax加载业务数据，调用DOM API更新到页面上。在纯前端渲染中，会明确告诉浏览器，下面要设置的内容)是文本<code>(.innerText)</code>还是属性<code>(.setAttribute)</code>还是要是<code>(.style)</code>。这样浏览器不会被轻易欺骗。</li></ul><p class="note note-primary"><strong>推荐-浏览器</strong><br/>    简单设置无法防御DOM型XSS，需要使用.textContent, vue避免使用v-html等</p></li><li><p>白名单</p></li><li><p>限制输入内容长度。可以增加XSS攻击难度，但是没有从根本上解决问题<strong>（推荐）</strong></p></li><li><p>HTTP-only Cookie：禁止JS读取某些敏感Cookie，攻击者完成XSS注入之后也无法获取cookie<strong>（推荐）</strong></p></li><li><p>验证码：防止脚本冒充用户提交危险操作</p></li></ul><h1 id="2-Cross-Site-Request-Forgery"><a href="#2-Cross-Site-Request-Forgery" class="headerlink" title="2. Cross Site Request Forgery"></a>2. Cross Site Request Forgery</h1><h2 id="2-1-CSRF是什么"><a href="#2-1-CSRF是什么" class="headerlink" title="2.1 CSRF是什么"></a>2.1 CSRF是什么</h2><p>CSRF指跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器进行一些操作。这是利用了cookie会在同源请求中携带发送给服务器的特点，以实现用户冒充</p><h2 id="2-2-CSRF有哪些类型"><a href="#2-2-CSRF有哪些类型" class="headerlink" title="2.2 CSRF有哪些类型"></a>2.2 CSRF有哪些类型</h2><ul><li><strong>get型</strong>，比如一个img标签里构建了一个请求</li><li><strong>post型</strong>，隐藏的表单，用户进入页面的时候自动提交</li><li><strong>链接型</strong>，诱导用户点击一个链接，该链接会发送请求</li></ul><h2 id="2-3-如何预防CSRF"><a href="#2-3-如何预防CSRF" class="headerlink" title="2.3 如何预防CSRF"></a>2.3 如何预防CSRF</h2><h3 id="2-3-1-同源检测"><a href="#2-3-1-同源检测" class="headerlink" title="2.3.1 同源检测"></a>2.3.1 <strong>同源检测</strong></h3><p>使用Origin Header或者Referer Header确定源域名。</p><ul><li>O：大部分请求的Header中会携带Origin字段，如果存在即为同域。但也存在两种以外情况（IE11同源政策，302重定向）。</li><li>R：验证HTTP头里的Referer字段（其中包括了请求来源地址）</li></ul><h3 id="2-3-2-CSRF-Token验证"><a href="#2-3-2-CSRF-Token验证" class="headerlink" title="2.3.2 CSRF Token验证"></a>2.3.2 <strong>CSRF Token验证</strong></h3><p>使用Token进行身份验证，这样CSRF攻击无法获取，也就冒充不了。需要注意的是，Token是可以放在cookie中的，为防止CSRF，就不能放在cookie中了，应当放在session中。</p><p class="note note-primary"><strong>推荐</strong><br/>    安全性高，但是繁琐且消耗资源大。使用Token对单服务器在大流量的情况压力非常大。并且在会话中存储Token非常繁琐，而且不能在通用的拦截上统一处理所有的接口。</p><h3 id="2-3-3-双重cookie验证"><a href="#2-3-3-双重cookie验证" class="headerlink" title="2.3.3 双重cookie验证"></a>2.3.3 <strong>双重cookie验证</strong></h3><p>在用户访问网站页面时，</p><ul><li>想请求域名注入一个cookie，内容为随机字符串</li><li>在前端向后端发起请求时，取出cookie，并添加到URL的参数中</li><li>后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。</li></ul><p class="note note-primary"><strong>推荐</strong><br/>    但是在大型网站上安全性没有Token高</p><h3 id="2-3-4-使用samesite-cookie"><a href="#2-3-4-使用samesite-cookie" class="headerlink" title="2.3.4 使用samesite cookie"></a>2.3.4 使用<code>samesite cookie</code></h3><p>限制cookie不被第三方使用。将samesite设为strict，表示这个cookie在任何情况下都不可能作为第三方cookie。将其设置为Lax，如果是个GET请求，则这个cookie可以作为第三方cookie。</p><p class="note note-primary"><strong>推荐</strong><br/>    但不支持子域，所以子域没有办法与主域共享登录信息</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://juejin.cn/post/6844903685122703367#heading-29">前端安全系列（一）：如何防止XSS攻击？</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://juejin.cn/post/6844903689702866952#heading-32">前端安全系列之二：如何防止CSRF攻击？</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识hexo博客</title>
    <link href="/2021/06/06/%E5%88%9D%E8%AF%86hexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/06/06/%E5%88%9D%E8%AF%86hexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Sean</p><p>前言 ：本文为如何搭建一个hexo静态博客，步骤非常细致，可以按照流程一步一步创建。文章也涵盖了一些创建博客时需要注意的问题以及我踩过的坑。 另外在配置环境和安装依赖时也可能会遇到很多问题，百度谷歌上对同类问题已有很多解答，本文不再赘述。</p></blockquote><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>博客部署到远端时创建的github仓库名格式为<code>username.github.io</code>，<strong>且username一定要与github用户名一致。</strong></li><li>windows操作系统要使用git bash，cmd无法执行一些终端命令</li></ol><h1 id="1-初建博客"><a href="#1-初建博客" class="headerlink" title="1. 初建博客"></a>1. 初建博客</h1><h2 id="1-1-配置环境、安装依赖"><a href="#1-1-配置环境、安装依赖" class="headerlink" title="1.1 配置环境、安装依赖"></a>1.1 配置环境、安装依赖</h2><ul><li>安装node</li><li>安装git</li><li>安装hexo，在终端中执行<code>npm i -g hexo-cli</code>全局安装</li></ul><h2 id="1-2-创建博客"><a href="#1-2-创建博客" class="headerlink" title="1.2 创建博客"></a>1.2 创建博客</h2><ul><li><p>进入到想要放置博客文件夹的位置，例如<code>cd D://</code></p></li><li><p>创建博客文件夹，<code>mkdir myBlog</code></p></li><li><p>进入blog文件夹，<code>cd myBlog</code></p></li><li><p>初始化博客，<code>hexo init</code></p></li><li><p>新建文章，<code>hexo new &quot;我的第一篇文章&quot;</code></p></li><li><p>使用markdown格式编辑这篇文章</p></li><li><p>生成博客，<code>hexo g</code></p></li><li><p>本地预览博客，<code>hexo s</code></p></li><li><p>清除旧数据，<code>hexo clean</code></p></li></ul><h1 id="2-部署博客到远端"><a href="#2-部署博客到远端" class="headerlink" title="2. 部署博客到远端"></a>2. 部署博客到远端</h1><ul><li><p>创建一个github仓库，仓库名格式为<code>username.github.io</code>，<strong>且username一定要与github用户名一致</strong>。</p></li><li><p>安装依赖<code>npm i --save hexo-deployer-git</code></p></li><li><p>配置blog文件夹里的<code>_config.yml</code>文件</p><p class="note note-warning">注意！type, repo, branch后面一定要有一个空格，否则会失败！</p><div class="code-wrapper"><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:type: git    repo: 你的github仓库地址    branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></li><li><p>清除旧数据，<code>hexo clean</code></p></li><li><p>生成博客，<code>hexo g</code></p></li><li><p>部署到远端 <code>hexo d</code></p></li><li><p>访问博客地址在线预览，网址为<code>你的用户名.github.io</code></p></li></ul><h1 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3. 更换主题"></a>3. 更换主题</h1><ul><li><p>在github上搜索<code>hexo-theme</code>找到喜欢的主题，推荐yilla, fluid-dev等</p></li><li><p>克隆主题。<code>git clone 目标主题的github地址 themes/xxx(主题的名字)</code></p></li><li><p>配置blog文件夹里的<code>_config.yml</code>文件</p><div class="code-wrapper"><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">language: zh-CNthemes: 你克隆的主题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></li><li><p>清除旧数据，<code>hexo clean</code></p></li><li><p>生成博客，<code>hexo g</code></p></li><li><p>部署到远端 <code>hexo d</code></p></li><li><p>访问博客地址在线预览，网址为<code>你的用户名.github.io</code></p></li><li></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.bilibili.com/video/BV1Yb411a7ty">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
